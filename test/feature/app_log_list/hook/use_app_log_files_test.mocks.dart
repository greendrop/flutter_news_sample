// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_news_sample/test/feature/app_log_list/hook/use_app_log_files_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i3;

import 'package:flutter_news_sample/feature/app_log_list/ripository/app_log_files_repository.dart'
    as _i6;
import 'package:flutter_news_sample/feature/app_logger/repository/app_logger_repository.dart'
    as _i4;
import 'package:hooks_riverpod/hooks_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRef_0<State extends Object?> extends _i1.SmartFake
    implements _i2.Ref<State> {
  _FakeRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_1 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppLoggerDirectoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLoggerDirectoryRepository extends _i1.Mock
    implements _i4.AppLoggerDirectoryRepository {
  @override
  _i2.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.Ref<Object?>);

  @override
  _i5.Future<_i3.Directory> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i5.Future<_i3.Directory>.value(_FakeDirectory_1(
          this,
          Invocation.method(
            #fetch,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Directory>.value(_FakeDirectory_1(
          this,
          Invocation.method(
            #fetch,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Directory>);
}

/// A class which mocks [AppLogFilesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogFilesRepository extends _i1.Mock
    implements _i6.AppLogFilesRepository {
  @override
  _i2.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeRef_0<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.Ref<Object?>);

  @override
  _i5.Future<List<_i3.FileSystemEntity>> fetch(
          {required _i3.Directory? directory}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
          {#directory: directory},
        ),
        returnValue: _i5.Future<List<_i3.FileSystemEntity>>.value(
            <_i3.FileSystemEntity>[]),
        returnValueForMissingStub: _i5.Future<List<_i3.FileSystemEntity>>.value(
            <_i3.FileSystemEntity>[]),
      ) as _i5.Future<List<_i3.FileSystemEntity>>);
}
